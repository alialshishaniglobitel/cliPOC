package com.globitel.diameterCodec.printing;

import java.io.DataOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.net.InetAddress;
import java.net.UnknownHostException;

import com.globitel.diameterCodec.Diameter.DiameterMessage;
import com.globitel.diameterCodec.interfaces.IMessagePrinter;
import com.globitel.utilities.commons.logger.MyLoggerFactory;

public class MessagePrinter implements IMessagePrinter
{
	// Generated by BreakPoint Software's Hex Workshop v6.0.1.4603
	// http://www.hexworkshop.com
	// http://www.bpsoft.com
	//
	// Source File: C:\Users\Ali.Shishani\Desktop\22.pcap
	// Time: 1/4/2018 4:44 PM
	// Orig. Offset: 0 / 0x00000000
	// Length: 24 / 0x00000018 (bytes)
	byte fileHeader[] =
	{ (byte) 0xD4, (byte) 0xC3, (byte) 0xB2, (byte) 0xA1, (byte) 0x02, (byte) 0x00, 
			(byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, 
			(byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0xFF, (byte) 0xFF, (byte) 0x00, (byte) 0x00, (byte) 0x71, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, };

	// Generated by BreakPoint Software's Hex Workshop v6.0.1.4603
	// http://www.hexworkshop.com
	// http://www.bpsoft.com
	//
	// Source File: C:\Users\Ali.Shishani\Desktop\22.pcap
	// Time: 1/4/2018 4:46 PM
	// Orig. Offset: 24 / 0x00000018
	// Length: 80 / 0x00000050 (bytes)
	byte onePacketHeader[] =
	{ (byte) 0xAF, (byte) 0xBB, (byte) 0xE3, (byte) 0x57, (byte) 0x96, (byte) 0x58, (byte) 0x00, (byte) 0x00, (byte) 0xC0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xC0, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x06, (byte) 0x00, (byte) 0x30, (byte) 0x88, (byte) 0x1D, (byte) 0x7C, (byte) 0x68, (byte) 0x00,
			(byte) 0x00, (byte) 0x08, (byte) 0x00, (byte) 0x45, (byte) 0xE0, (byte) 0x00, (byte) 0xB0, (byte) 0xCA, (byte) 0x47, (byte) 0x00, (byte) 0x00, (byte) 0x3E, (byte) 0x84, (byte) 0xAB,
			(byte) 0xA5, (byte) 0x0A, (byte) 0xFD, (byte) 0x11, (byte) 0x06, (byte) 0xAC, (byte) 0x10, (byte) 0x3C, (byte) 0xEA, (byte) 0x0F, (byte) 0x1C, (byte) 0x0F, (byte) 0x1C, (byte) 0xA4,
			(byte) 0xCA, (byte) 0xC0, (byte) 0xE1, (byte) 0xE8, (byte) 0xD4, (byte) 0xB4, (byte) 0x3C, (byte) 0x00, (byte) 0x03, (byte) 0x00, (byte) 0x90, (byte) 0x22, (byte) 0x32, (byte) 0x65,
			(byte) 0xBB, (byte) 0x00, (byte) 0x00, (byte) 0x05, (byte) 0xEC, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, };

	// Generated by BreakPoint Software's Hex Workshop v6.0.1.4603
	// http://www.hexworkshop.com
	// http://www.bpsoft.com
	// Generated by BreakPoint Software's Hex Workshop v6.0.1.4603
	// http://www.hexworkshop.com
	// http://www.bpsoft.com
	//
	// Source File: C:\Users\Ali.Shishani\Desktop\11.pcap
	// Time: 1/4/2018 5:27 PM
	// Orig. Offset: 104 / 0x00000068
	// Length: 128 / 0x00000080 (bytes)
//	byte dummyPacketBody[] =
//	{ (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x80, (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x18, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x05,
//			(byte) 0xDB, (byte) 0x00, (byte) 0x00, (byte) 0x05, (byte) 0xDB, (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x0C, (byte) 0x40, (byte) 0x00, (byte) 0x00, (byte) 0x0C, (byte) 0x00,
//			(byte) 0x00, (byte) 0x07, (byte) 0xD1, (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x08, (byte) 0x40, (byte) 0x00, (byte) 0x00, (byte) 0x34, (byte) 0x68, (byte) 0x71, (byte) 0x7A,
//			(byte) 0x61, (byte) 0x69, (byte) 0x6E, (byte) 0x2E, (byte) 0x6D, (byte) 0x6D, (byte) 0x65, (byte) 0x2E, (byte) 0x65, (byte) 0x70, (byte) 0x63, (byte) 0x2E, (byte) 0x6D, (byte) 0x6E,
//			(byte) 0x63, (byte) 0x30, (byte) 0x30, (byte) 0x31, (byte) 0x2E, (byte) 0x6D, (byte) 0x63, (byte) 0x63, (byte) 0x34, (byte) 0x31, (byte) 0x36, (byte) 0x2E, (byte) 0x33, (byte) 0x67,
//			(byte) 0x70, (byte) 0x70, (byte) 0x6E, (byte) 0x65, (byte) 0x74, (byte) 0x77, (byte) 0x6F, (byte) 0x72, (byte) 0x6B, (byte) 0x2E, (byte) 0x6F, (byte) 0x72, (byte) 0x67, (byte) 0x00,
//			(byte) 0x00, (byte) 0x01, (byte) 0x28, (byte) 0x40, (byte) 0x00, (byte) 0x00, (byte) 0x29, (byte) 0x65, (byte) 0x70, (byte) 0x63, (byte) 0x2E, (byte) 0x6D, (byte) 0x6E, (byte) 0x63,
//			(byte) 0x30, (byte) 0x30, (byte) 0x31, (byte) 0x2E, (byte) 0x6D, (byte) 0x63, (byte) 0x63, (byte) 0x34, (byte) 0x31, (byte) 0x36, (byte) 0x2E, (byte) 0x33, (byte) 0x67, (byte) 0x70,
//			(byte) 0x70, (byte) 0x6E, (byte) 0x65, (byte) 0x74, (byte) 0x77, (byte) 0x6F, (byte) 0x72, (byte) 0x6B, (byte) 0x2E, (byte) 0x6F, (byte) 0x72, (byte) 0x67, (byte) 0x00, (byte) 0x00,
//			(byte) 0x00, };
	private static final int SCTP_CHUNK_SIZE = 16;
	private static final int PACKET_LENGTH_INDEX2 = 12;
	private static final int PACKET_LENGTH_INDEX = 8;
	private static final int TOTAL_LENGTH_INDEX = 0x22;
	private static final int TIME_INDEX = 0;
	private static final int DST_IP = 0x30;
	private static final int SRC_IP = 0x2C;
	private static final int TIME_MILL_INDEX = 4;
	private String OUTPUT_PATH = System.getProperty("user.dir") + "/";
	private String fileName;

	private int tid = Integer.MAX_VALUE-2;

	public MessagePrinter(String traceDirectory)
	{
		OUTPUT_PATH = traceDirectory + "/";
	}

	@Override
	public boolean write(String _fileName, DiameterMessage msg)
	{
		try
		{
			fileName = _fileName + ".txt";
			endPcap(fileName, msg, false);
			return true;
		}
		catch (Exception e)
		{
			MyLoggerFactory.getInstance().getAppLogger().error(e);
		}
		return false;
	}

	public static int SetBigEndian(byte[] dst, long src, int length, int startIndex)
	{
		if (length == 0)
		{
			if (((src) >> 8) == 0)
				length = 1;
			else if (((src) >> 16) == 0)
				length = 2;
			else if (((src) >> 24) == 0)
				length = 3;
			else
				length = 4;
		}

		int x = 0x000000FF;

		int k = length - 1;
		int j = 0;
		while (k > -1)
		{
			// casting to uchar will always yeild to zero here!
			dst[startIndex + j++] = (byte) (((src) & (x << (k * 8))) >> (k * 8));
			k--;
		}
		return length;
	}

	void setTime(byte[] buff, long time, int index)
	{
		int src = (int) (time);
		int x = 0x000000FF;

		int k = 0;
		int j = 0;
		while (k < 4)
		{
			// casting to uchar will always yeild to zero here!
			buff[index + j++] = (byte) (((src) & (x << (k * 8))) >> (k * 8));
			k++;
		}
	}

	/**
	 * @param out
	 *            same parameter as StartFlush. will replace .txt with .pcap
	 */
	@Override
	public synchronized void endPcap(String out, DiameterMessage msg, boolean removeFile)
	{
		out = OUTPUT_PATH + out;
		String name_pcap = out.replace(".txt", ".pcap");
		
		int i = 42;
		DataOutputStream os;
		try
		{
			byte[] dummyPacketBody = msg.encode();
			setTime(onePacketHeader, dummyPacketBody.length + 64, PACKET_LENGTH_INDEX);

			setTime(onePacketHeader, dummyPacketBody.length + 64, PACKET_LENGTH_INDEX2);

			SetBigEndian(onePacketHeader, dummyPacketBody.length + 48, 2, TOTAL_LENGTH_INDEX);
			System.out.println("MESSAGE ADDRESS 1: "+msg.srcAddress);
			System.out.println("MESSAGE ADDRESS 2: "+msg.dstAddress);
			setIPInBuffer(onePacketHeader, msg.srcAddress, SRC_IP);
			setIPInBuffer(onePacketHeader, msg.dstAddress, DST_IP);
			if ( msg.getDstIP() != null && msg.getDstIP().size() > 1)
			{
				setIPInBuffer(onePacketHeader, msg.getDstIP().get(0), DST_IP);
				System.out.println("MESSAGE ADDRESS 3: "+msg.getDstIP().get(0));
			}
			Long l = System.currentTimeMillis();

			long currentTimeMillis = System.currentTimeMillis();
			setTime(onePacketHeader, (currentTimeMillis / 1000), TIME_INDEX);
			setTime(onePacketHeader, (currentTimeMillis % 1000), TIME_MILL_INDEX);
			
			System.out.println("MESSAGE ADDRESS 4: "+msg.srcPort);
			System.out.println("MESSAGE ADDRESS 5: "+msg.dstPort);
			SetBigEndian(onePacketHeader, msg.srcPort, 2, 0x34);// src port
			SetBigEndian(onePacketHeader, msg.dstPort, 2, 0x36);// dst port

			SetBigEndian(onePacketHeader, dummyPacketBody.length + SCTP_CHUNK_SIZE, 2, 0x42);// set data
																	// chunk
																	// size of
																	// SCTP

			File tmpDir = new File(name_pcap);
			if ( tmpDir.exists() ) {
				os = new DataOutputStream(new FileOutputStream(name_pcap, true));
			}
			else
			{
				os = new DataOutputStream(new FileOutputStream(name_pcap));
				os.write(fileHeader);
			}
			
			SetBigEndian(onePacketHeader, gettid() , 4, 0x44);
			
			os.write(onePacketHeader);
			os.write(dummyPacketBody);

			os.close();
		}
		catch (Exception e1)
		{
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
	}

	private int gettid()
	{
		// TODO Auto-generated method stub
		tid = (tid+1)%Integer.MAX_VALUE;
		return tid;
	}

	private void setIPInBuffer(byte[] rawData, String string, int i)
	{
		byte[] bytes = null;
		try
		{
			bytes = InetAddress.getByName(string).getAddress();
		}
		catch (UnknownHostException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		// TODO Auto-generated method stub
		for (int k = 0; k < 4; k++)
		{
			rawData[k + i] = bytes[k];
		}
	}

	@Override
	public boolean freeResources()
	{
		File f = new File(fileName);
		f.delete();
		// TODO Auto-generated method stub
		return true;
	}

	@Override
	public String getFilePath()
	{
		// TODO Auto-generated method stub
		return fileName;
	}
}
